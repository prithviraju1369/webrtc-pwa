{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/twilio/errors/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;;GAEG;AACH,yCAAyC;AACzC,yCAQqB;AAyBnB,8BAhCA,+BAAmB,CAgCA;AACnB,uBAhCA,wBAAY,CAgCA;AACZ,wBA/BA,yBAAa,CA+BA;AACb,sBA/BA,uBAAW,CA+BA;AACX,0BA/BA,2BAAe,CA+BA;AA3BjB,2DAA2D;AAC3D;IAA0C,wCAAK;IAA/C;;IAEA,CAAC;IAAD,2BAAC;AAAD,CAAC,AAFD,CAA0C,KAAK,GAE9C;AAFY,oDAAoB;AAGjC;IAAuC,qCAAK;IAA5C;;IAEA,CAAC;IAAD,wBAAC;AAAD,CAAC,AAFD,CAAuC,KAAK,GAE3C;AAFY,8CAAiB;AAG9B;IAAuC,qCAAK;IAA5C;;IAEA,CAAC;IAAD,wBAAC;AAAD,CAAC,AAFD,CAAuC,KAAK,GAE3C;AAFY,8CAAiB;AAI9B,uEAAuE;AACvE,sCAAsC;AACtC,SAAgB,cAAc,CAAC,IAAY;IACzC,IAAM,KAAK,GAA4B,wBAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9D,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,IAAI,oBAAoB,CAAC,gBAAc,IAAI,eAAY,CAAC,CAAC;KAChE;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAND,wCAMC","sourcesContent":["/**\n * @internalapi\n */\n/* tslint:disable max-classes-per-file */\nimport {\n  AuthorizationErrors,\n  ClientErrors,\n  errorsByCode,\n  GeneralErrors,\n  MediaErrors,\n  SignalingErrors,\n  TwilioError,\n} from './generated';\n\n// Application errors that can be avoided by good app logic\nexport class InvalidArgumentError extends Error {\n  type: 'InvalidArgumentError';\n}\nexport class InvalidStateError extends Error {\n  type: 'InvalidStateError';\n}\nexport class NotSupportedError extends Error {\n  type: 'NotSupportedError';\n}\n\n// This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\nexport function getErrorByCode(code: number): TwilioError {\n  const error: TwilioError | undefined = errorsByCode.get(code);\n  if (!error) {\n    throw new InvalidArgumentError(`Error code ${code} not found`);\n  }\n  return error;\n}\n\n// All errors we want to throw or emit locally in the SDK need to be passed through here.\nexport {\n  AuthorizationErrors,\n  ClientErrors,\n  GeneralErrors,\n  MediaErrors,\n  SignalingErrors,\n  TwilioError,\n};\n"]}